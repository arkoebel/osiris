<?php
	
	function libxml_display_errors() {
		$ret = "";
		$errors = libxml_get_errors();
		foreach ($errors as $error) {
			$ret .= libxml_display_error($error);
		}
		libxml_clear_errors();
		return $ret;
	}
	
	function libxml_display_error($error) {
		$return = "";
		switch ($error->level) {
			case LIBXML_ERR_WARNING:
            $return .= "Warning $error->code : ";
            break;
			case LIBXML_ERR_ERROR:
            $return .= "Error $error->code : ";
            break;
			case LIBXML_ERR_FATAL:
            $return .= "Fatal Error $error->code : ";
            break;
		}
		$return .= trim($error->message);
		$return .= " on line $error->line\n";
		
		return $return;
	}
	
	function mlog($file,$trace){	
		echo gmdate('Y-m-d H:i:s') . ' : ' . str_pad($file,20,' ') . ' - ' . $trace . "\n";
	}
	
	function getoutputheader($template,$sender,$receiver,$error,$source,$ref,$outref,$sourcetime){
		
		ob_start();
		include 'templates/' . $template;
		$xml = ob_get_contents();
		ob_end_clean();
		
		return simplexml_load_string($xml);
	}
	
	
$infolder = $argv[1];
$outfolder = $argv[2];
$delay = $argv[3];
$pp = json_decode(file_get_contents('params.json'),TRUE);

while(true){
	
	foreach(scandir($infolder) as $file){
		if(($file !== '.')&&($file !== '..')&&($file !== 'done')){
			mlog($file,'Reading ' . $file);
			$input = file_get_contents($infolder . '/' . $file);
			
			$query = simplexml_load_string($input);
			
			if($query===FALSE)
				break;
			
			$namespaces = $query->getDocNamespaces();
			$query->registerXPathNamespace('S2SCTIcf',$namespaces["S2SCTIcf"]);
			$query->registerXPathNamespace('r',$namespaces["S2SCTIcf"]);
			$query->registerXPathNamespace('a','urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02');
			$domelement = dom_import_simplexml($query);
			$domdoc = $domelement->ownerDocument;
			
			libxml_use_internal_errors(true);
			
			if($domdoc->schemaValidate('xsd/SCTIcfBlkCredTrf.xsd')){
				mlog($file,'Input XML Validated OK');
		    }else{
			    mlog($file,'Input XML didn\'t validate. Errors:');
				die(print_r(libxml_get_errors(),true));
			}
			$root = $query->children($namespaces['S2SCTIcf']);
			
			$outref = 'V' . gmdate('Ymd') . rand(10000,10000000);
			
			// $header = getoutputheader($pp['outHeaderTemplate'],
			// $root->RcvgInst,
			// $root->SndgInst,
			// 'XXX',
			// $file,
			// $root->FileRef,
			// $outref,
			// $root->FDtTm);
			
			$head = simplexml_load_string('<root xmlns="urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"/>');
			$countErrors = 0;
			$outdoc = dom_import_simplexml($head);
			
			$bulk_index=0;
			
			//loop on bulk elements
			foreach($query->xpath('//r:FIToFICstmrCdtTrf') as $element){
				
				$element->registerXPathNamespace('a','urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02');
				$bulk_rule_index=0;
				$bulk_index++;
				$nbfailed = 0;
				$operation_index = 0;
				//die(print_r($element,true));
				$operationsxml = simplexml_load_string('<root xmlns="urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"/>');
				$operationsdom = dom_import_simplexml($operationsxml);
				//loop on operations
				foreach($element->xpath('a:CdtTrfTxInf') as $operation){
					$operation->registerXPathNamespace('a','urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02');
					$operation_index++;
					$operation_rule_index=0;
					
					foreach($pp['oprules'] as $rule){
						$operation_rule_index++;     
						$opparams = array();
						
						foreach($rule['params'] as $parm){
							$aa=$operation->xpath($parm['value']);
							$opparams[$parm['name']] =  (string) $aa[0];
						}
						
						mlog($file,"Bulk $bulk_index / Operation $operation_index / Rule #$operation_rule_index : " . $rule['comment'] . " Rule=" . $rule['rule']);
						
						$ret = eval('$aaa = ' . $rule['rule'] . ';');
						
						if(eval('return ' . $rule['rule'] . ';')){
							mlog($file,'Matched operation rule ' . $rule['comment']);
							mlog($file,'Params : ' . var_dump($opparams));
							if($rule['fail']==='yes'){
								mlog($file,'Rule is set to fail.');
								$nbfailed++;
								$newdoc = new DomDocument();
								ob_start();
								include 'templates/' . $rule['template'];
								$aa = ob_get_contents();
								ob_end_clean();
								
								$newdoc->loadXml($aa);
								$node = $operationsdom->ownerDocument->importNode($newdoc->documentElement,true);
								$operationsdom->appendChild($node);
							}else{
								mlog($file,'Operation rule is set to pass');
							}
							break;
						}
					} // end operation rules loop
				} // end operations loop 
				
				//var_dump($operationsdom->ownerDocument->saveXML());
				
				// loop on bulk rules
				$bulkxml = simplexml_load_string('<root xmlns="urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02"/>');
				$bulkdom = dom_import_simplexml($bulkxml);
				foreach($pp['rules'] as $rule){
					$bulk_rule_index++;     
					$params = array();
					foreach($rule['params'] as $parm){
						$aa=$element->xpath($parm['value']);
						$params[$parm['name']] =  (string) $aa[0];
						echo $parm['name'] . ' : ' . (string) $aa[0] . "\n";
					}
					
					mlog($file,"Bulk $bulk_index / Rule #$bulk_rule_index : " . $rule['comment'] . " Rule=" . $rule['rule']);
					
					mlog($file,'Bulk : ' . $bulk_index . ' Nb OP : ' . $operation_index . ' Nb fail : ' .  $nbfailed . "\n");
					
					$ret = eval('$aaa = ' . $rule['rule'] . ';');
					
					if(eval('return ' . $rule['rule'] . ';')){
						mlog($file,'Matched operation rule ' . $rule['comment']);
						mlog($file,'Params : ' . var_dump($params));
						if($rule['fail']==='yes'){
							mlog($file,'Rule is set to fail.');
							$countErrors++;
							$newdoc = new DomDocument();
							ob_start();
							include 'templates/' . $rule['template'];
							$aa = ob_get_contents();
							ob_end_clean();
						
							$newdoc->loadXml($aa);
							$node = $bulkdom->ownerDocument->importNode($newdoc->documentElement,true);
							$xxx = $bulkdom->appendChild($node);
							if($rule['noop']==""){
								foreach($operationsdom->getElementsByTagName('TxInfAndSts') as $operation){
									$node = $bulkdom->ownerDocument->importNode($operation,true);
									$xxx->appendChild($node);
								}
							}
						}else{
							mlog($file,'Operation rule is set to pass');
						}
						break;
					}
				} // end bulk rules loop
				//var_dump($bulkdom->ownerDocument->saveXML());
				if($bulkdom !== null){
				    //die(print_r($outdoc->documentElement,true));
				    $node = $outdoc->ownerDocument->documentElement->appendChild(new DomElement('SCTCvfBlkCredTrf',null,'urn:S2SCTCvf:xsd:$SCTCvfBlkCredTrf'));
					//var_dump($bulkxml->asXml());
				    foreach($bulkdom->getElementsByTagName('FIToFIPmtStsRptS2') as $pacs){
					   //var_dump($pacs->ownerDocument->saveXML($pacs));
					    $node = $outdoc->ownerDocument->importNode($pacs,true);
						$outdoc->appendChild($node);
					}
				}
			} // end bulk elements loop
			//die(print_r($outdoc->ownerDocument->saveXML(),true));
			
			mlog($file,'Bulk failed = ' . $countErrors . ' out of ' . $bulk_index . "\n");
			
			if($countErrors==0){
			    $header = getoutputheader(
										  $pp['outHeaderTemplate'],
										  $root->RcvgInst,
										  $root->SndgInst,
										  'A00',
										  $file,
										  $root->FileRef,
										  $outref,
										  $root->FDtTm);
				mlog($file,'==>No Error');
				//$header->children('urn:S2SCTCvf:xsd:$SCTCvfBlkCredTrf')->FileRjctRsn = 'A00';
			}else if($countErrors<$bulk_index){
			    $header = getoutputheader(
										  $pp['partialHeaderTemplate'],
										  $root->RcvgInst,
										  $root->SndgInst,
										  'A01',
										  $file,
										  $root->FileRef,
										  $outref,
										  $root->FDtTm);
				//$header->children('urn:S2SCTCvf:xsd:$SCTCvfBlkCredTrf')->FileRjctRsn = 'A01';
				mlog($file,"==>$countErrors Errors");
			}else{
				$header = getoutputheader(
										  $pp['errorHeaderTemplate'],
										  $root->RcvgInst,
										  $root->SndgInst,
										  'R13',
										  $file,
										  $root->FileRef,
										  $outref,
										  $root->FDtTm);
				mlog($file,'==>Only Errors');
			}
		
			$domelement2 = dom_import_simplexml($header);
			$domdoc2 = $domelement2->ownerDocument;
			$crdt = $domdoc2->getElementsByTagName('SCTCvfBlkCredTrf')->item(0);
			foreach($outdoc->getElementsByTagNameNS('urn:S2SCTCvf:xsd:$SCTCvfBlkCredTrf','FIToFIPmtStsRptS2') as $pacs){
			   
			    $node = $domdoc2->importNode($pacs,true);
				$crdt->appendChild($node);
			}
		
			libxml_use_internal_errors(true);
		
			if($domdoc2->schemaValidate('xsd/SCTCvfBlkCredTrf.xsd')){
			
				mlog($file,'Output validated OK');
			}else{
				mlog($file,'Output didn\'t validate');
				die(print_r(libxml_get_errors(),true));
			}
			//var_dump($header->asXml());
			$header->asXml('out/' . $outref . '.V');
			mlog($file,'Wrote ' . $outref . '.V');
			
			if(!rename("$infolder/$file","$infolder/done/$file"))
				die('Unable to move $file ==> Exiting');
		
			sleep($delay);
		}
	}
//break;
	echo "Sleeping " . 10 * $delay . "s...\n";
	sleep(10 * $delay);
}

